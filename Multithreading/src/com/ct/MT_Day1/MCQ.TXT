Q1)
class Test extends Thread {
    public void run() {
        for(int i=0; i<=10; i++) {
            System.out.println("Hello Welcome here.."+i);
        }
    }
}
class Test1 {
    public static void main(String[] args) {
        Test t = new Test();
        t.start();
        t.start();
    }
}
Output:
Runtime Exception: IllegalThreadStateException
Explanation: You cannot start a thread more than once. The second call to t.start() throws IllegalThreadStateException.
________________________________________
Q2)
class Test {
    public static void main(String []args) {
        Thread t = Thread.currentThread();
        System.out.println(t);
        System.out.println("Name of thread  : "+t.getName());
        System.out.println("Id of thread  : "+t.getId());
    } 
}
Output (may vary):
Thread[main,5,main]
Name of thread  : main
Id of thread  : 1
Explanation: This code displays details of the main thread.
________________________________________
Q3)
class Test {
    public static void main(String args[]) {
        new Thread() {
            public void run() {
                System.out.println("task one");
            }
        }.start();

        new Thread() {
            public void run() {
                System.out.println("task two");
            }
        }.start();
    }
}
Output:
task one
task two
(Order may vary) Explanation: Two anonymous threads are created and started. They print messages.
________________________________________
Q4)
class Test {
    public static void main(String args[]) {
        Runnable r1 = new Runnable() {
            public void run() {
                System.out.println("task one");
            }
        };

        Runnable r2 = new Runnable() {
            public void run() {
                System.out.println("task two");
            }
        };

        Thread t1 = new Thread(r1);
        Thread t2 = new Thread(r2);

        t1.start();
        t2.start();
    }
}
Output:
task one
task two
(Order may vary) Explanation: Two Runnable objects passed to two threads. Both start and execute their tasks.
________________________________________
Q5)
class SimpleThread extends Thread {
    public SimpleThread(String str) {
        super(str);
    }
    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(i + " " + getName());
            try {
                sleep((int)(Math.random() * 1000));
            } catch (InterruptedException e) {}
        }
        System.out.println("DONE! " + getName());
    }
}
class Test {
    public static void main (String args[]) {
        new SimpleThread("J2EE").start();
        new SimpleThread("J2ME").start();
    }
}
Output:
Interleaved numbers from both threads with names, ending in DONE! J2EE / J2ME
Explanation: Two threads print their index and name, then finish.
________________________________________
Q6)
class Prime extends Thread {
    public void run() {
        try {
            for(int i=1;i<=10;i++) {
                if(i==2||i==3||i==5||i==7) {
                    System.out.println ("Prime No.= "+i);
                }
                Thread.sleep(500);
            }
        } catch (Exception e){}
    }
}
class NotPrime extends Thread {
    public void run() {
        try {
            for(int i=1;i<=10;i++) {
                if(i==4||i==6||i==8||i==9||i==10) {
                    System.out.println ("Non-Prime No.= "+i);
                }
                Thread.sleep(500);
            }
        } catch (Exception e){}
    }
}
class Test {
    public static void main(String args[]) {
        new Prime().start();
        new NotPrime().start();
    }
}
Output:
Prime and Non-Prime numbers interleaved (timing may differ)
Explanation: Both threads print prime and non-prime numbers with sleep to simulate delay.
________________________________________

✅ Q1
✅ Code:
class Task extends Thread {
    public void run() {
        synchronized (this) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Task Completed by :" + Thread.currentThread().getName());
        }
    }
}

public class Exam {
    public static void main(String[] args) throws InterruptedException {
        Task task1 = new Task();
        Task task2 = new Task();
        task1.start();
        task2.start();
        task1.join();
        task2.join();
    }
}
✅ Explanation:
•	Two threads task1 and task2 are started.
•	Both have their own synchronized (this) blocks, so they don’t block each other.
•	sleep(1000) adds delay but doesn't release the lock.
•	After delay, each thread prints its own message.
•	join() ensures the main thread waits for both to finish.
✅ Output:
Task Completed by :Thread-0
Task Completed by :Thread-1
(Note: Output order may vary)
________________________________________
✅ Q2
✅ Code:
class Exam {
    public static void main(String[] args) throws InterruptedException {
        final Object lock = new Object();

        Thread t1 = new Thread(() -> {
            synchronized (lock) {
                try {
                    System.out.println("Waiting for Response");
                    lock.wait();
                } catch (InterruptedException e) {
                    System.out.println("Interrupted");
                }
            }
        });

        Thread t2 = new Thread(() -> {
            synchronized (lock) {
                lock.notify();
                System.out.println("Sending Notification");
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();
        System.out.println("Completed");
    }
}
✅ Explanation:
•	t1 waits on lock and releases it.
•	t2 notifies lock, waking up t1.
•	Proper wait/notify coordination used on the same object.
•	join() ensures main waits for both threads.
✅ Output:
Waiting for Response
Sending Notification
Completed
(Note: Order of Sending Notification and Completed may vary slightly)
________________________________________
✅ Q3
✅ Code:
class Reentrant {
    public synchronized void m() {
        n();
        System.out.println("this is m() method");
    }

    public synchronized void n() {
        System.out.println("this is n() method");
    }
}

class Demo30 {
    public static void main(String args[]) {
        final Reentrant re = new Reentrant();
        Thread t1 = new Thread() {
            public void run() {
                re.m();
            }
        };
        t1.start();
    }
}
✅ Explanation:
•	m() is synchronized and calls another synchronized method n() of the same object.
•	Java allows reentrant locks, so the thread can re-enter the lock.
✅ Output:
this is n() method
this is m() method
________________________________________
✅ Q4
✅ Code:
class Tester {
    synchronized void hit(long n) {
        for (int i = 1; i < 3; i++)
            System.out.print(n + "-" + i + " ");
    }
}

public class Demo31 implements Runnable {
    static Tester pp2 = new Tester();

    public static void main(String[] args) {
        new Thread(new Demo31()).start();
        new Thread(new Demo31()).start();
    }

    public void run() {
        pp2.hit(Thread.currentThread().getId());
    }
}
✅ Explanation:
•	Two threads share a common object pp2.
•	hit() is synchronized, so only one thread accesses it at a time.
•	Output will be two separate sequences, one per thread.
✅ Output:
<Thread-ID>-1 <Thread-ID>-2 <Thread-ID>-1 <Thread-ID>-2 
(Actual thread IDs will vary)
________________________________________
✅ Q5
✅ Code:
class Pen {}
class Paper {}

public class demo35 {
    public static void main(String[] args) {
        final Pen pn = new Pen();
        final Paper pr = new Paper();

        Thread t1 = new Thread() {
            public void run() {
                synchronized (pn) {
                    System.out.println("Thread1 is holding Pen");
                    try { Thread.sleep(1000); } catch (InterruptedException e) {}
                    synchronized (pr) {
                        System.out.println("Requesting for Paper");
                    }
                }
            }
        };

        Thread t2 = new Thread() {
            public void run() {
                synchronized (pr) {
                    System.out.println("Thread2 is holding Paper");
                    try { Thread.sleep(1000); } catch (InterruptedException e) {}
                    synchronized (pn) {
                        System.out.println("requesting for Pen");
                    }
                }
            }
        };

        t1.start();
        t2.start();
    }
}
✅ Explanation:
•	Deadlock risk: t1 holds pn and waits for pr, while t2 holds pr and waits for pn.
•	May cause threads to wait forever.
✅ Output (Possible):
Thread1 is holding Pen
Thread2 is holding Paper
(May hang due to deadlock — no further output)
________________________________________
✅ Q6
✅ Code:
class Job extends Thread {
    private Integer number = 0;

    public void run() {
        synchronized (this) {
            for (int i = 1; i < 100; i++) {
                number++;
            }
            notify();
        }
    }

    public Integer getNumber() {
        return number;
    }
}

public class Demo45 {
    public static void main(String[] args) throws Exception {
        Job thread = new Job();
        thread.start();

        synchronized (thread) {
            thread.wait();
        }

        System.out.println(thread.getNumber());
    }
}
✅ Explanation:
•	wait() is called on thread only after acquiring lock on it.
•	notify() is called after incrementing number.
•	Output is final value of number.
✅ Output:
99
________________________________________
✅ Q7
✅ Code:
public class Demo48 {
    public static void main(String[] args) {
        System.out.print("A ");
        new Object().notifyAll();
        System.out.println("B");
    }
}
✅ Explanation:
•	notifyAll() is called without holding lock on that object.
•	Results in IllegalMonitorStateException.
✅ Output:
A Exception in thread "main" java.lang.IllegalMonitorStateException
    at java.base/java.lang.Object.notifyAll(Native Method)
    at Demo48.main(Demo48.java:4)
________________________________________
✅ Q8
✅ Code:
class InterruptDemo extends Thread {
    public void run() {
        try {
            Thread.sleep(1000);
            System.out.println("task");
        } catch (InterruptedException e) {
            throw new RuntimeException(" My Thread interrupted..." + e);
        }
    }
}

class demo53 {
    public static void main(String args[]) {
        InterruptDemo t1 = new InterruptDemo();
        t1.start();
        try {
            t1.interrupt();
        } catch (Exception e) {
            System.out.println("Exception handled " + e);
        }
    }
}
✅ Explanation:
•	Thread is interrupted during sleep.
•	Catches InterruptedException and throws RuntimeException.
✅ Output:
Exception in thread "Thread-0" java.lang.RuntimeException: My Thread interrupted...java.lang.InterruptedException: sleep interrupted
    at InterruptDemo.run(demo53.java:7)
________________________________________
✅ Q9
✅ Code:
class Demo56 extends Thread {
    public void run() {
        try {
            Thread.sleep(100);
        } catch (Exception e) {
            System.out.println("Thread terminated");
        }
        for (int i = 1; i <= 5; i++)
            System.out.println(i);
    }

    public static void main(String args[]) {
        Demo56 t1 = new Demo56();
        t1.start();

        t1.interrupt();
    }
}
✅ Explanation:
•	interrupt() is called after start().
•	Since sleep() is called, it throws InterruptedException.
•	Catch block prints, then continues.
✅ Output:
Thread terminated
1
2
3
4
5
________________________________________
✅ Q10
✅ Code:
class Demo59 {
    public static void main(String[] args) {
        ThreadB b = new ThreadB();
        b.start();

        synchronized (Demo59.class) {
            try {
                System.out.println("Waiting for b to complete...");
                b.wait();
            } catch (InterruptedException e) {
            }
            System.out.println("Total is :" + b.total);
        }
    }
}

class ThreadB extends Thread {
    int total;

    public void run() {
        synchronized (this) {
            for (int i = 0; i < 100; i++) {
                total = total + i;
            }
            System.out.println("Completed I am going to awake him");
            notify();
        }
    }
}
✅ Explanation:
•	Illegal: wait() called on b, but synchronized block is on Demo59.class.
•	Results in IllegalMonitorStateException.
✅ Output:
Waiting for b to complete...
Exception in thread "main" java.lang.IllegalMonitorStateException
    at java.lang.Object.wait(Native Method)
    at Demo59.main(Demo59.java:9)
Completed I am going to awake him


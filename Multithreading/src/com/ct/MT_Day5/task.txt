MCQs :
------
Q1)

class Task extends Thread {
    public void run() {
        synchronized (this) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Task Completed by :"+Thread.currentThread().getName());
        }
    }
}

public class Exam {
    public static void main(String[] args) throws InterruptedException {
        Task task1 = new Task();
        Task task2 = new Task();
        task1.start();
        task2.start();
        task1.join();
        task2.join();
    }
}

answer==> Task Completed by :Thread-0
          Task Completed by :Thread-1

Q2)
class Exam {
    public static void main(String[] args) throws InterruptedException {
        final Object lock = new Object();

        Thread t1 = new Thread(() -> {
            synchronized (lock) {
                try {
					System.out.println("Waiting for Response");
                    lock.wait();
                } catch (InterruptedException e) {
                    System.out.println("Interrupted");
                }
            }
        });

        Thread t2 = new Thread(() -> {
            synchronized (lock) {
                lock.notify();
				System.out.println("Sending Notification");
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();
		System.out.println("Completed");
    }
}

answer ==>  Waiting for Response
            Sending Notification
            Completed

Q3)
class Reentrant 
{  
    public synchronized void m() 
	{  
    n();  
    System.out.println("this is m() method");  
    }  
    public synchronized void n()
	{  
    System.out.println("this is n() method");  
    }  
}  

class Demo30
{  
public static void main(String args[])
{  
final Reentrant re=new Reentrant();    
Thread t1=new Thread()
{  
public void run()
{  
re.m();//calling method of Reentrant class  
}  
};  
t1.start();  
}}  

Q4)
class Tester 
{
 synchronized void hit(long n) 
	{
  for(int i = 1; i < 3; i++)
   System.out.print(n + "-" + i + " ");
   }
   }
   public class Demo31 implements Runnable 
	{
   static Tester pp2 = new Tester();
   public static void main(String[] args) 
	{
   new Thread(new demo31()).start();
   new Thread(new demo31()).start();
    }
   public void run() 
	   {
	   pp2.hit(Thread.currentThread().getId()); 
	   }
   }

Q5)

class Pen{}
class Paper{}

public class demo35 
{
  public static void main(String[] args)
  {
     final Pen pn =new Pen();
     final Paper pr =new Paper();
     
     Thread t1 = new Thread(){
            public void run()
            {
                synchronized(pn)
                {
                    System.out.println("Thread1 is holding Pen");
                  try{
                      Thread.sleep(1000);
                  }catch(InterruptedException e){}
                    synchronized(pr)
                {  System.out.println("Requesting for Paper"); }
                    
                }
            }
        };
      Thread t2 = new Thread(){
            public void run()
            {
                synchronized(pr)
                {
                    System.out.println("Thread2 is holding Paper");
                  try{
                      Thread.sleep(1000);
                  }catch(InterruptedException e){}
                    synchronized(pn)
                {  System.out.println("requesting for Pen"); }
                    
                }
            }
        };
        
        t1.start();
        t2.start();
  }
    
}

Q6)

class Job extends Thread {
private Integer number = 0;
    public void run() {
    synchronized (this) {
        for (int i = 1; i < 100; i++) {
            number++;
        }
        notify();
    }
    }
    public Integer getNumber() {
        return number;
    }
}
public class Demo45 {
    public static void main(String[] args) throws Exception {
        Job thread = new Job();
        thread.start();
        synchronized (thread) {

            thread.wait();
        }
        System.out.println(thread.getNumber());
    }
}

Q7)
public class Demo48 
{
    public static void main(String[] args) 
    {
        System.out.print("A ");
        new Object().notifyAll();
        System.out.println("B");
    }
}

Q8)
class InterruptDemo extends Thread{  
   public void run(){  
     try{  
        Thread.sleep(1000);  
        System.out.println("task");  
     }catch(InterruptedException e)
	 {  
         throw new RuntimeException(" My Thread interrupted..."+e);  
     }  
  
}
}
class demo53
{
 
public static void main(String args[]){  
   InterruptDemo t1 = new InterruptDemo();  
   t1.start();  
   try
   {  
       t1.interrupt();  
   }
   catch(Exception e)
   {  
     System.out.println("Exception handled "+e);  
    }  
  
  }  
}  

Q9)
class Demo56 extends Thread{  
  
   public void run() 
   {
   try
   {
	Thread.sleep(100)  ;
   }
   catch (Exception e)
   {
	   System.out.println("Thread terminated");
   }
      for(int i=1;i<=5;i++)  
         System.out.println(i);  
      }  
  
   public static void main(String args[]){  
      Demo56 t1 = new Demo56();  
      t1.start();  
  
      t1.interrupt();  
  
    }  
}  

Q10)

class Demo59 
{
	public static void main(String[] args) 
	{
		ThreadB b = new ThreadB();
		b.start();

		synchronized(Demo59.class)
		{
			try
			{
				System.out.println("Waiting for b to complete...");
				b.wait();
			}
			catch (InterruptedException e)
			{
			}
			System.out.println("Total is :"+b.total);
		}
	}
}
class ThreadB extends Thread
{
	int total;
	public void run()
	{
		synchronized(this)
		{
			for(int i=0; i<100; i++)
			{
				total=total+i;
			}
			System.out.println("Complted I am going to awake him");
			notify();
		}
	}
}

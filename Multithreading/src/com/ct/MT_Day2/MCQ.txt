________________________________________
Q1
public class Test45 extends Thread {
    static String sName = "good";
    public static void main(String argv[]) {
        Test45 t = new Test45();
        t.nameTest(sName);
        System.out.println(sName);    
    }

    public void nameTest(String sName) {
        sName = sName + " idea ";
        start();
    }

    public void run() {
        for(int i=0; i<4; i++) {
            sName = sName + " " + i;
        }
    }
}
Output:
good
Explanation:
•	sName inside nameTest is a local variable shadowing the static variable.
•	start() calls run() in a separate thread, but sName modified in run() is also local.
•	System.out.println(sName) in main() refers to the static variable, which remains unchanged.
________________________________________
Q2
public class Test46 {
    public static void main(String argv[]) {
        Test1 pm1 = new Test1("One");
        pm1.run();
        Test1 pm2 = new Test1("Two");
        pm2.run();
    }
}
class Test1 extends Thread {
    private String sTname = "";
    Test1(String s) {
        sTname = s;
    }
    public void run() {
        for(int i = 0; i < 5 ; i++) {
            try {
                sleep(1000);
            } catch(InterruptedException e) {}
            Thread.yield();
            System.out.println(sTname);
        }
    }
}
Output:
One
One
One
One
One
Two
Two
Two
Two
Two
Explanation:
•	run() is called directly, so no new thread is started.
•	It runs sequentially, first printing "One" 5 times, then "Two" 5 times.
________________________________________
Q3
class Test55 extends Thread {
    static Thread tf, ts;

    public synchronized void run() {
        System.out.println(Thread.currentThread().getName()+"");
        ts.start();
    }

    public static void main(String[] args) {
        tf = new Thread(new Test55(),"SCJP");
        ts = new Thread(new Test55(),"SCJWD");
        tf.start();
    }
}
Output:
SCJP
SCJWD
Explanation:
•	tf is started in main, which prints "SCJP" and calls ts.start() inside run(), leading to "SCJWD".
________________________________________
Q4
public class Test56 implements Runnable {
    public void run() {
        try {
            System.out.println("run.");
            throw new RuntimeException("Problem");
        } catch (Exception e) {
            System.out.println("Handled");
        }
    }
    public static void main(String[] args) {
        Thread t = new Thread(new Test56());
        t.start();
        System.out.println("End of method.");
    }
}
Output:
End of method.
run.
Handled
Explanation:
•	Main thread prints "End of method".
•	Child thread runs run() and handles the exception.
________________________________________
Q5
public class Test59 {
    public static void main(String [] args) {
        myRunnable r = new myRunnable();

        Thread t1 = new Thread();
        Thread t2 = new Thread();

        t1.setName("Thread One");
        t2.setName("Thread Two");

        t1.start();
        t2.start();

        System.out.println("Mains Thread: " + Thread.currentThread().getName());
    }
}

class myRunnable implements Runnable {
    public void run() {
        for ( int i = 1; i < 4; i++) 
            System.out.println("Thread: " + Thread.currentThread().getName());
    }
}
Output:
Mains Thread: main
Explanation:
•	The threads t1 and t2 don’t have the runnable attached, so their run() does nothing.
•	Only main prints its name.
Q6
class Test {
    public static void main(String[] args) {
        Thread t = new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
            }
        });
        t.run();
        System.out.println("Main thread finished");
    }
}
Output:
main: 0
main: 1
main: 2
main: 3
main: 4
Main thread finished
Explanation:
•	t.run() runs the code in the main thread (not a new thread).
•	So all output shows main as the thread name.
________________________________________
Q7
class Counter {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public synchronized int getCount() {
        return count;
    }
}

public class Test {
    public static void main(String[] args) throws InterruptedException {
        Counter counter = new Counter();

        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();

        System.out.println(counter.getCount());
    }
}
Output:
2000
Explanation:
•	Both threads increment the same counter 1000 times.
•	increment() is synchronized, so result is consistent.
________________________________________
Q8
class Test {
    public static void main(String[] args) throws InterruptedException {
        Thread t1 = new Thread(() -> {
            System.out.println("Thread-1 running");
        });

        t1.start();
        t1.join();
        t1.start();
    }
}
Output:
Thread-1 running
Exception in thread "main" java.lang.IllegalThreadStateException
Explanation:
•	You cannot start a thread twice.
•	Second t1.start() throws IllegalThreadStateException.
________________________________________
Q9
class Test {
    public static void main(String[] args) {
        Thread t = new Thread(() -> {
            System.out.println(Thread.currentThread().getName() + " is running");
        });

        t.start();
        t.run();
    }
}
Output:
Thread-0 is running
main is running
Explanation:
•	t.start() runs in a new thread.
•	t.run() runs again but on the main thread.
________________________________________
Q10
class Test {
    public static void main(String[] args) {
        Runnable task = () -> {
            for (int i = 0; i < 5; i++) {
                System.out.println(Thread.currentThread().getName() + ": " + i);
            }
        };

        Thread t1 = new Thread(task, "Thread-1");
        Thread t2 = new Thread(task, "Thread-2");

        t1.start();
        t2.run();
    }
}
Output (order may vary):
Thread-2: 0
Thread-2: 1
Thread-2: 2
Thread-2: 3
Thread-2: 4
Thread-1: 0
Thread-1: 1
Thread-1: 2
Thread-1: 3
Thread-1: 4
Explanation:
•	t1.start() runs in a new thread.
•	t2.run() runs in the main thread.
________________________________________
Q11
class A implements Runnable {
    public void run() {
        System.out.print(Thread.currentThread().getName());
    }
}
class B implements Runnable {
    public void run() {
        new A().run();
        new Thread(new A(),"T2").run();
        new Thread(new A(),"T3").start();
    }
}
public class Test {
    public static void main (String[] args) {
        new Thread(new B(),"T1").start();  
    }
}
Output:
T1T1T3
Explanation:
•	run() methods are directly called, except the last one which starts a new thread.
•	So first 2 lines run in "T1", last in "T3".
________________________________________
Q12
public class Test extends Thread {
    static String name = "ravi";

    public static void main(String args[]) {
        Test t = new Test();
        t.Test(name);
        System.out.print(" " + name);
    }

    public void Test(String name) {
        start();
        System.out.print(" method");
    }

    public void run() {
        System.out.print(" run");
    }
}
Output:
 method run ravi
Explanation:
•	start() starts a new thread that runs run().
•	Main thread prints "method" and "ravi".
________________________________________
Q13
class Job extends Thread {
    private Integer number = 0;
    public void run() {
        for (int i = 1; i < 1000000; i++) {
            number++;
        }
    }
    public Integer getNumber() {
        return number;
    }
}
public class Test {
    public static void main(String[] args) {
        Job thread = new Job();
        thread.start();
        try {
            thread.join();
        } catch (Exception e) {}
        System.out.println(thread.getNumber());
    }
}
Output:
999999
Explanation:
•	Loop increments from 1 to 999999.
•	join() ensures main waits until it finishes.
________________________________________
Q14
class MyData extends Thread {
    private boolean request;
    private String  data;

    public void run() {
        storeMessage("Hello");
        String str = retrieveMessage();
        System.out.println(str);
    }

    public synchronized void storeMessage(String data) {
        request = true;
        this.data = data;
    }

    public synchronized String retrieveMessage() {
        request = false;
        return data + " : " + request;
    }
}
public class Test {
    public static void main(String[] args) {
        MyData md = new MyData();
        md.start();
    }
}
Output:
Hello : false
Explanation:
•	Message is stored (request = true).
•	Then retrieved (request = false) and printed.
________________________________________
Q15
public class Test extends Thread {
    public static void main(String[] args) throws Exception {
        Test t = new Test();
        t.start();
        t.method();
    }

    public void run() {
        System.out.println("run");
    }

    public void method() {
        hello();
        System.out.println("method");
    }

    public void hello() {
        hello1();
        System.out.println("PR");
    }

    public void hello1() {
        System.out.println("RR");
    }
}
Output (order may vary):
RR
PR
method
run
Explanation:
•	Main thread calls method(), hello(), and hello1().
•	Separate thread prints run.
Q16
class Test {
    public static void main(String[] args) {
        Runnable r = new Runnable() {
            public void run() {
                System.out.print("Cat");
            }
        };
        Thread t = new Thread(r) {
            public void run() {
                System.out.print("Dog");
            }
        };
        t.start();
    }
}
Output:
Dog
Explanation:
•	A Thread overrides run() to print "Dog".
•	Even though Runnable says "Cat", the thread’s own run() is used because Thread’s method takes precedence.
________________________________________
Q17
class MyThread extends Thread {
    public void run() {
        System.out.println("MyThread: run()");
    }
    public void start() {
        System.out.println("MyThread: start()");
    }
}

class MyRunnable implements Runnable {
    public void run() {
        System.out.println("MyRunnable: run()");
    }
    public void start() {
        System.out.println("MyRunnable: start()");
    }
}

public class Test {
    public static void main(String args[]) {
        MyThread myThread = new MyThread();
        MyRunnable myRunnable = new MyRunnable();
        Thread thread = new Thread(myRunnable);
        myThread.start();   // calls overridden start() in MyThread
        thread.start();     // runs MyRunnable's run()
    }
}
Output:
MyThread: start()
MyRunnable: run()
Explanation:
•	MyThread.start() calls overridden start(), not run().
•	thread.start() starts the real thread, calling run() of MyRunnable.
________________________________________
Q18
class MyThread extends Thread {
    String myName;

    MyThread(String name) {
        myName = name;
    }

    public void run() {
        for(int i = 0; i < 10; i++) {
            System.out.println(myName);
        }
    }
}

public class Test {
    public static void main(String args[]) {
        try {
            MyThread mt1 = new MyThread("mt1");
            MyThread mt2 = new MyThread("mt2");
            mt1.start();
            mt1.join();  // wait for mt1 to finish
            mt2.start();
        } catch(InterruptedException ex) {}
    }
}
Output:
mt1
mt1
...
mt1
mt2
mt2
...
mt2
("mt1" printed 10 times first, then "mt2" 10 times)
Explanation:
•	mt1.join() ensures mt2 starts only after mt1 finishes.
________________________________________
Q19
class MyThread implements Runnable {
    String str;
    MyThread(String str) {
        this.str = str;
    }
    public void run() {
        for(int i = 1; i <= 10; i++) {
            System.out.println(str + " : " + i);
            try {
                Thread.sleep(100);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}

public class Test {
    public static void main(String [] args) {
        MyThread obj1 = new MyThread("Cut the Ticket");
        MyThread obj2 = new MyThread(" Show the Seat");

        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();
    }
}
Output (interleaved):
Cut the Ticket : 1
 Show the Seat : 1
Cut the Ticket : 2
 Show the Seat : 2
...
Explanation:
•	Two threads print interleaved messages 10 times each with a sleep.
•	Output order can vary based on scheduler.
________________________________________
Q20
public class Test76 {
    public static void main(String[] args) {
        new Test76().go();
    }

    public void go() {
        Runnable r = new Runnable() {
            public void run() {
                System.out.println("foo");
            }
        };
        Thread t = new Thread(r);
        t.start(); // runs in new thread
        t.run();   // runs in main thread
    }
}
Output:
foo
foo
Explanation:
•	t.start() creates new thread.
•	t.run() runs again in main thread.
________________________________________


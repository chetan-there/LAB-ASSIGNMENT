Let's solve each question one by one, providing the full question, the correct output, and a brief explanation below each.
________________________________________
Q1
public class Test45 extends Thread {
    static String sName = "good";
    public static void main(String argv[]) {
        Test45 t = new Test45();
        t.nameTest(sName);
        System.out.println(sName);    
    }

    public void nameTest(String sName) {
        sName = sName + " idea ";
        start();
    }

    public void run() {
        for(int i=0; i<4; i++) {
            sName = sName + " " + i;
        }
    }
}
Output:
good
Explanation:
•	sName inside nameTest is a local variable shadowing the static variable.
•	start() calls run() in a separate thread, but sName modified in run() is also local.
•	System.out.println(sName) in main() refers to the static variable, which remains unchanged.
________________________________________
Q2
public class Test46 {
    public static void main(String argv[]) {
        Test1 pm1 = new Test1("One");
        pm1.run();
        Test1 pm2 = new Test1("Two");
        pm2.run();
    }
}
class Test1 extends Thread {
    private String sTname = "";
    Test1(String s) {
        sTname = s;
    }
    public void run() {
        for(int i = 0; i < 5 ; i++) {
            try {
                sleep(1000);
            } catch(InterruptedException e) {}
            Thread.yield();
            System.out.println(sTname);
        }
    }
}
Output:
One
One
One
One
One
Two
Two
Two
Two
Two
Explanation:
•	run() is called directly, so no new thread is started.
•	It runs sequentially, first printing "One" 5 times, then "Two" 5 times.
________________________________________
Q3
class Test55 extends Thread {
    static Thread tf, ts;

    public synchronized void run() {
        System.out.println(Thread.currentThread().getName()+"");
        ts.start();
    }

    public static void main(String[] args) {
        tf = new Thread(new Test55(),"SCJP");
        ts = new Thread(new Test55(),"SCJWD");
        tf.start();
    }
}
Output:
SCJP
SCJWD
Explanation:
•	tf is started in main, which prints "SCJP" and calls ts.start() inside run(), leading to "SCJWD".
________________________________________
Q4
public class Test56 implements Runnable {
    public void run() {
        try {
            System.out.println("run.");
            throw new RuntimeException("Problem");
        } catch (Exception e) {
            System.out.println("Handled");
        }
    }
    public static void main(String[] args) {
        Thread t = new Thread(new Test56());
        t.start();
        System.out.println("End of method.");
    }
}
Output:
End of method.
run.
Handled
Explanation:
•	Main thread prints "End of method".
•	Child thread runs run() and handles the exception.
________________________________________

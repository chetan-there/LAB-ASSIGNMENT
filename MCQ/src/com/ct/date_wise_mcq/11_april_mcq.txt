Sure! Here's all 14 Java abstract/interface-based questions with:
•	✅ Correct Output or Error
•	🧠 Reason (inside program as comments)
•	🔘 All options (A, B, C, D)
•	✅ Correct Option marked clearly
________________________________________
✅ 1. Output-Based Question
interface Course {
    String name = "Naresh";
    int duration = 1;
    void addCourse();
    abstract void addDuration();
    abstract void addfaculty();
}

class Impl implements Course {
    public void addCourse() {
        System.out.println("Cource Added");
    }
    public void addDuration() {
        System.out.println("Add Duration");
    }
    public void addfaculty() {
        System.out.println("Add Faculty");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Course course = new Impl();
        course.addCourse();

        Impl impl = new Impl();
        impl.addDuration();
        impl.addfaculty();
    }
}
// ✅ Output:
// Cource Added
// Add Duration
// Add Faculty

// 🔘 Options:
// A) Compile-time error  
// B) Cource Added  
// C) Cource Added Add Duration  
// ✅ D) Cource Added Add Duration Add Faculty
________________________________________
❌ 2. Compile-Time Error: modifying final variable
interface Impl {
    int a = 0; // implicitly final
}

class NIT implements Impl {
    public void display() {
        a++; // ❌ Error: final variable cannot be modified
    }
}

public class Abstract {
    public static void main(String[] args) {
        NIT nit = new NIT();
        nit.display();
    }
}

// 🔘 Options:
// A) 0  
// ✅ B) Compile-time error  
// C) Runtime error  
// D) No Output
________________________________________
❌ 3. Compile-Time Error: access modifier violation
interface Course {
    void course();
}

interface Faculty {
    void faculty();
}

class Impl implements Course, Faculty {
    private void course() { // ❌ Can't reduce visibility of public method
        System.out.println("Course");
    }

    void faculty() { // ❌ Not public, should match interface
        System.out.println("Faculty");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.course();
        impl.faculty();
    }
}

// 🔘 Options:
// A) Course Faculty  
// ✅ B) Compile-time error  
// C) Runtime error  
// D) No output
________________________________________
❌ 4. Compile-Time Error: calling a variable as method
abstract class Course {
    abstract void course();
}

abstract class Faculty {
    abstract void faculty();
}

class Impl extends Course {
    void course() {
        System.out.println("Course");
    }

    Faculty faculty = new Faculty() {
        void faculty() {
            System.out.println("Faculty");
        }
    };
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.course();
        impl.faculty(); // ❌ Trying to call a variable like a method
    }
}

// 🔘 Options:
// A) Course Faculty  
// B) Course  
// ✅ C) Compile-time error  
// D) Runtime error
________________________________________
✅ 5. Output:
interface Course {
    void course();
}

interface Faculty {
    void faculty();
}

class Impl implements Course, Faculty {
    public void course() {
        System.out.println("Course");
    }
    public void faculty() {
        System.out.println("Faculty");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.course();
        impl.faculty();
    }
}
// ✅ Output:
// Course
// Faculty

// 🔘 Options:
// A) Compile-time error  
// B) Course  
// C) Faculty  
// ✅ D) Course Faculty
________________________________________
✅ 6. Output (anonymous class variable):
abstract class Course {
    abstract void course();
}

abstract class Faculty {
    abstract void faculty();
}

class Impl extends Course {
    void course() {
        System.out.println("Course");
    }

    Faculty faculty = new Faculty() {
        void faculty() {
            System.out.println("Faculty");
        }
    };
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.course();
    }
}

// ✅ Output:
// Course

// 🔘 Options:
// A) Course Faculty  
// ✅ B) Course  
// C) Faculty  
// D) Compile-time error
________________________________________
✅ 7. Output (anonymous object with method call):
abstract class Course {
    abstract void course();
}

abstract class Faculty {
    abstract void faculty();
}

class Impl extends Course {
    void course() {
        System.out.println("Course");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.course();

        Faculty faculty = new Faculty() {
            void faculty() {
                System.out.println("Faculty");
            }
        };
        faculty.faculty();
    }
}
// ✅ Output:
// Course
// Faculty

// 🔘 Options:
// A) Compile-time error  
// B) Course  
// C) Faculty  
// ✅ D) Course Faculty
________________________________________
✅ 8. Output (default method):
interface NIT {
    void department();
    default void course() {
        System.out.println("Java");
    }
}

class Impl implements NIT {
    public void department() {
        System.out.println("Software");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.department();
        impl.course();
    }
}
// ✅ Output:
// Software
// Java

// 🔘 Options:
// A) Compile-time error  
// B) Java  
// ✅ C) Software Java  
// D) Software
________________________________________
✅ 9. Output (method override):
interface NIT {
    void department();
    default void course() {
        System.out.println("Java");
    }
}

class Impl implements NIT {
    public void department() {
        System.out.println("Software");
    }
    public void course() {
        System.out.println("Python");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.department();
        impl.course();
    }
}
// ✅ Output:
// Software
// Python

// 🔘 Options:
// A) Java  
// ✅ B) Software Python  
// C) Software Java  
// D) Python
________________________________________
❌ 10. Compile-Time Error: static method via object
interface NIT {
    static void course() {
        System.out.println("Java");
    }
    void department();
}

class Impl implements NIT {
    public void department() {
        System.out.println("Software");
    }
}

public class Abstract {
    public static void main(String[] args) {
        Impl impl = new Impl();
        impl.department();
        impl.course(); // ❌ Cannot call static method from object
    }
}

// 🔘 Options:
// A) Software Java  
// B) Software  
// ✅ C) Compile-time error  
// D) Runtime error
________________________________________
❌ 11. Compile-Time Error: private method without body
abstract class NIT {
    private void print(); // ❌ Must be abstract or have body
}

public class Abstract {
    public static void main(String[] args) {
        NIT nit = new NIT() {
            public void print() {
                System.out.println("nit");
            }
        };
        nit.print(); // ❌ Method is private, not accessible
    }
}

// 🔘 Options:
// ✅ A) Compile-time error  
// B) nit  
// C) Runtime error  
// D) No Output
________________________________________
❌ 12. Compile-Time Error: missing method body
abstract class NIT {
    protected void print(); // ❌ Missing body
}

public class Abstract {
    public static void main(String[] args) {
        NIT nit = new NIT() {
            public void print() {
                System.out.println("nit");
            }
        };
        nit.print();
    }
}

// 🔘 Options:
// ✅ A) Compile-time error  
// B) nit  
// C) Runtime error  
// D) No Output
________________________________________
❌ 13. Compile-Time Error: private + abstract
abstract class NIT {
    private abstract void print(); // ❌ abstract can't be private
}

public class Abstract {
    public static void main(String[] args) {
        NIT nit = new NIT() {
            public void print() {
                System.out.println("nit");
            }
        };
        nit.print();
    }
}

// 🔘 Options:
// A) nit  
// B) Compile-time error  
// ✅ C) Illegal combination of private and abstract  
// D) No Output
________________________________________
✅ 14. Output:
abstract class NIT {
    protected abstract void print();
}

public class Abstract {
    public static void main(String[] args) {
        NIT nit = new NIT() {
            public void print() {
                System.out.println("nit");
            }
        };
        nit.print();
    }
}
// ✅ Output:
// nit

// 🔘 Options:
// ✅ A) nit  
// B) Compile-time error  
// C) Runtime error  
// D) No Output


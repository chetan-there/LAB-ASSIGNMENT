1.Choose the correct output of the following program
interface Drawable
{
   void draw();
}
public class FunctionalInterface {
	public static void main(String[] args) 
	{
	   () -> System.out.println("Drawing...");	
	}
}

Answer ==> Error ""

2.What is the output of the following snippet
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		Runnable nit = () -> System.out.println("Thread Started");
		nit.run();
	}
}


Answer ==> Error because it is not a functional interface , dont have a inteface. 



3.What is the output of the following code
interface Course
{
	String courseName();
	String facultyName();
	String duration();
}
@FunctionalInterface
interface NIT extends Course
{
	String nit(String courseName);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (String course) -> course;
		System.out.println(nit.nit("Java"));
	}
}


Answer ==> Compile time error beacause we write anotation an also declear more than one abstract method thats why it is giving error 



4.What is the output of the following code
@FunctionalInterface
interface NIT 
{
	String nit(String courseName);
}
interface Course extends NIT
{
	String courseName();
	String facultyName();
	String duration();
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (String course) -> course;
		System.out.println(nit.nit("Java"));
	}
}


Answer ==> Java 


5.What is the output of the following code
public class FunctionalInterfaceExample
{
  public static void main(String[] args)
  {
    Function<String, Boolean> fun = str -> str.startsWith("A");	
		
		System.out.println(fun.apply("Ankit"));
	}
}


Answer ==> Compile time error beacause java.util.function.Function package is not available



6.Which is the correct Compile time error for the following snippet
public class FunctionalInterface {
	public static void main(String[] args) {
		String str = (String s) -> s.compareTo("goolge");
		System.out.println(str);
	}
}


Answer ==> Error Interface not found




7.Choose the correct output of the following program
@FunctionalInterface 
interface Str
{
	String str(String str);
}

public class FunctionalInterface {
	public static void main(String[] args) {
		Str nit = s -> "Naresh"+s;
		System.out.println(nit.str("IT"));	
	}
}


Answer ==> NareshIT


8.Choose the correct output of the following program
interface NIT
{
	public void nit();
}

public class FunctionalInterface 
{
	public static void main(String[] args) {
		String str = "IT";
		NIT n = () -> 
		{
			System.out.println("Naresh" +str);
		};
	}
}


Answer ==> Warning , we did not call the nit method with the referance "n"



9.What is the output of the following program
public class Java8
{
	public static void main(String[] args) 
	{
		() -> System.out.println("NareshIT");
	}
}

Answer ==> we can't  write lambda expression without assign to the interface

10.What is the output of the following Snippet
interface NIT
{
	public void myInterface(int a);
}

public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a+1;
	}
}


Answer ==> Error , Here we did't call the method and also if we call the method ,methods return type is void so it will give an error 


11.What is the output of the following Snippet
public class FunctionalInterface {
	public static void main(String args[])
	{
		Function<Integer, Double> div = a -> a / 2.0;
		System.out.println(div.apply(15));
	}
}


Answer ==> compile time error beacause we did't import java.util.function.function so how can predefine method will work


12 What is the output of the following code

class Student
{ 
    private int id;
    private String name;
    private String gender;
    private int age;
 
    public Student(int id, String name, String gender, int age) 
	{
        this.id = id;
        this.name = name;
        this.gender = gender;
        this.age = age;
    }
 
    @Override
    public String toString() 
		{
        return "[id=" + id + ", name=" + name + ", gender=" + gender + ", age=" + age + "]";
        }
}
		
public class FunctionalInterface 
{
	public static void main(String[] args) 
	{
      Supplier<Student> stdSupplier = () -> new Student(1, "Virat", "Male", 24);
		
        Student std =  stdSupplier.get();
        System.out.println(std);       
	}
}


Answer ==>  Import Missing? java.util.Function.Supplier




13.What is the output of the following code
interface NIT
{
	public int myInterface(int a);
}

public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a+1;
	}
}

Answer ==> we did't pass the argument to the method 

14.What is the output of the following code
@FunctionalInterface
interface NIT
{
	int cal(int value);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (int value) -> value+25;		
		System.out.println("Result: "+nit.cal(20));
	}
}
Answer: Result 45

15.What is the output of the following code
@FunctionalInterface
interface NIT
{
	void nit(String name);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (String name) -> "";
		System.out.println(nit.nit("NARESHIT"));
		
	}
}


Answer ==> compile time error , method's return type is void



16.What is the output of the following code
@FunctionalInterface
interface NIT
{
	String nit(String name);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (String name) -> "Welcome to ";
		System.out.println(nit.nit("NARESHIT"));		
	}
}


Answer ==> Here in lambda expression we did't concat the String called name 


17.What is the output of the following Snippet
@FunctionalInterface
interface NIT
{
	String str(String nit);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
	NIT nit = (String nit) -> nit +"";
	}
}


Answer ==> parameter is same thats why also we did't print the method 



18.What is the output of the following code
interface NIT
{
	String nit(String name);
}
public class FunctionalInterface
{
	public static void main(String[] args) {
		NIT nit = (String name) -> "Welcome to " + name;
		System.out.println(nit.nit("NARESHIT"));		
	}
}


Answer ==>



19.Simple Functional Interface without using Lambda function
@FunctionalInterface
interface NIT
{
	String nit(String name);
}
public class FunctionalInterfaceExample implements NIT
{
	public static void main(String[] args) {
		FunctionalInterfaceExample nit = new FunctionalInterfaceExample();
		System.out.println(nit.nit("Welcome to "));
	}	
	@Override
	public String nit(String name) {
		return name+"NARESHIT";
	}
}


Answer ==>


20.What is the output of the following code
@FunctionalInterface
interface NIT
{
	String nit(String name);
}
public class FunctionalInterfaceExample
{
	public static void main(String[] args) {
		NIT nit = (String name) -> {
			return name;
		};
		
		NIT nit1 = (String name) -> name;
		
		System.out.println(nit.nit("Welcome to ")+nit1.nit("NARESHIT"));
	}
}


Answer ==>


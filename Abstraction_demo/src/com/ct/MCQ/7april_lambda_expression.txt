1.
interface Drawable {
   void draw();
}
public class FunctionalInterface {
	public static void main(String[] args) {
	   () -> System.out.println("Drawing..."); // ❌ ERROR: Lambda expression is not assigned or invoked
	}
}
❌ Compile-time error
Reason: Lambda expression is not used correctly. It must be assigned to a functional interface variable and called.
________________________________________
2.
public class FunctionalInterfaceExample {
	public static void main(String[] args) {
		Runnable nit = () -> System.out.println("Thread Started");
		nit.run();
	}
}
✅ Output:
Thread Started
Reason: Runnable is a functional interface, lambda is assigned and invoked using run().
________________________________________
3.
interface Course {
	String courseName();
	String facultyName();
	String duration();
}
@FunctionalInterface
interface NIT extends Course {
	String nit(String courseName);
}
public class FunctionalInterfaceExample {
	public static void main(String[] args) {
		NIT nit = (String course) -> course;
		System.out.println(nit.nit("Java"));
	}
}
❌ Compile-time error
Reason: NIT extends a non-functional interface Course with 3 abstract methods, making it no longer functional.
________________________________________
4.
@FunctionalInterface
interface NIT {
	String nit(String courseName);
}
interface Course extends NIT {
	String courseName();
	String facultyName();
	String duration();
}
public class FunctionalInterfaceExample {
	public static void main(String[] args) {
		NIT nit = (String course) -> course;
		System.out.println(nit.nit("Java"));
	}
}
✅ Output:
Java
Reason: NIT is still a valid functional interface with one abstract method. The interface Course extending it doesn't affect it here.
________________________________________
5.
public class FunctionalInterfaceExample {
  public static void main(String[] args) {
    Function<String, Boolean> fun = str -> str.startsWith("A");	
	System.out.println(fun.apply("Ankit"));
  }
}
✅ Output:
true
Reason: "Ankit" starts with "A", so startsWith("A") returns true.
________________________________________
6.
public class FunctionalInterface {
	public static void main(String[] args) {
		String str = (String s) -> s.compareTo("goolge"); // ❌ ERROR: Incompatible types
		System.out.println(str);
	}
}
❌ Compile-time error: Incompatible types: bad return type in lambda expression
Reason: Lambda is returning int, but it's being assigned to a String.
________________________________________
7.
@FunctionalInterface 
interface Str {
	String str(String str);
}
public class FunctionalInterface {
	public static void main(String[] args) {
		Str nit = s -> "Naresh"+s;
		System.out.println(nit.str("IT"));	
	}
}
✅ Output:
NareshIT
Reason: Lambda adds "Naresh" to the input "IT".
________________________________________
8.
interface NIT {
	public void nit();
}
public class FunctionalInterface {
	public static void main(String[] args) {
		String str = "IT";
		NIT n = () -> {
			System.out.println("Naresh" + str);
		};
	}
}
✅ No output
Reason: Lambda is defined but not called using n.nit().
________________________________________
9.
public class Java8 {
	public static void main(String[] args) {
		() -> System.out.println("NareshIT"); // ❌ ERROR: Not assigned or invoked
	}
}
❌ Compile-time error
Reason: Lambda expression is unused. It must be assigned and invoked.
________________________________________
10.
interface NIT {
	public void myInterface(int a);
}
public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a+1; // ❌ ERROR: void method returning value
	}
}
❌ Compile-time error:
Reason: Lambda returns a value, but interface method myInterface has void return type.
________________________________________
11.
public class FunctionalInterface {
	public static void main(String args[]) {
		Function<Integer, Double> div = a -> a / 2.0;
		System.out.println(div.apply(15));
	}
}
✅ Output:
7.5
Reason: 15 / 2.0 gives 7.5 as a double.
________________________________________
12.
✅ Output: [id=1, name=Virat, gender=Male, age=24]
Reason: Lambda returns a Student object, and toString() is properly overridden.
________________________________________
13.
interface NIT {
	public int myInterface(int a);
}
public class Java8 {
	public static void main(String[] args) {
		NIT nit = (a) -> a+1;
	}
}
✅ No output
Reason: Lambda assigned but not called.
________________________________________
14.
✅ Output:
Result: 45
Reason: 20 + 25 = 45
________________________________________
15.
@FunctionalInterface
interface NIT {
	void nit(String name);
}
public class FunctionalInterfaceExample {
	public static void main(String[] args) {
		NIT nit = (String name) -> "";
		System.out.println(nit.nit("NARESHIT")); // ❌ ERROR: void method can't be used in println
	}
}
❌ Compile-time error
Reason: nit() is void, but trying to print its return value.
________________________________________
16.
✅ Output:
Welcome to 
Reason: Lambda ignores input and always returns "Welcome to ".
________________________________________
17.
@FunctionalInterface
interface NIT {
	String str(String nit);
}
public class FunctionalInterfaceExample {
	public static void main(String[] args) {
		NIT nit = (String nit) -> nit +"";
	}
}
✅ No output
Reason: Lambda defined but not invoked.
________________________________________
18.
✅ Output:
Welcome to NARESHIT
Reason: Concatenates "Welcome to " with input string.
________________________________________
19.
✅ Output:
Welcome to NARESHIT
Reason: Implements the method in the class and invokes using object.
________________________________________
20.
✅ Output:
Welcome to NARESHIT
Reason: Both lambdas return their input, final output is string concatenation:
•	"Welcome to " from nit.nit()
•	"NARESHIT" from nit1.nit()
________________________________________

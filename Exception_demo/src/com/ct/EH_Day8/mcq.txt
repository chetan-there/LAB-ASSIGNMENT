MCQs :
-------
1.What is the output of the following program
class Student{    
	void message() throws Exception{  // line 1
		System.out.println("Hai Student");  
		}    
	}    
	    
class Faculty extends Student{    
	void message() {  // line 2
		System.out.println("hai faculty");  
		}
}


public class ExceptionHandling 
{
	public static void main(String args[]) {    
	   Student nit = new Faculty();    
	     
	   try {    
	   nit.message();    
	   }  
	   catch (Exception e){}   
	  
	  }    
}

==>=>
Output: "hai faculty"
Explanation: The Faculty class overrides the message() method without declaring any exception (which is allowed for overriding methods as long as they don't throw broader exceptions). The try-catch block is unnecessary here but doesn't affect the output.




2.What is the output of the following program
public class ExceptionHandling  {  
    public static void main(String args[])  
    {           
        try {  
            try {  
                try {  
                    int arr[] = { 5,7,89,7,54,22,35,144,587,4,25,33,698,541,2,44,5,74,4 };  
                    System.out.println(arr[35]);  
                } catch (ArithmeticException e) {  
                    System.out.println("Arithmetic exception");  
                }  
            }catch (ArrayIndexOutOfBoundsException ar) {  
                System.out.println(" ArrayIndexOutOfBoundsException ");  
            }  
        }  
        catch (Exception e) {  
            System.out.print("Exception");  
        }  
    }  
}  
==>Output: "ArrayIndexOutOfBoundsException"
Explanation: The code tries to access arr[35] which is out of bounds (array length is 19). This exception is caught by the middle catch block.



3.What is the output of the following program
public class ExceptionHandling  {
	void nit()  
	{
		throw new java.io.IOException();
	}
	public static void main(String[] args) {
		ExceptionHandling nit = new ExceptionHandling();
		nit.nit();
		System.out.println("Executed");
	}
}

==>
Compilation Error
Explanation: The method throws java.io.IOException but doesn't declare it in the throws clause. Unchecked exceptions don't need to be declared, but IOException is checked.

4.What is the output of the following program
class NIT
{
	static void nit() throws IOException  
	{
		throw new IOException("IOException");
	}
}
public class ExceptionHandling  {
	
	public static void main(String[] args) {
		try {
			NIT.nit();
		} catch (IOException e) {
			System.out.println("Exception in catch");
		}
		System.out.println("Executed");
	}
}

==>Exception in catch
Executed




5.What is the output of the following program
class NIT
{
	static void nit() throws IOException  
	{
		throw new IOException("Input Output Exception");
	}
}

public class ExceptionHandling  {
	public static void main(String[] args) throws IOException {		
			NIT.nit();
	}
} 
==>Program will compile but throw IOException at runtime
Explanation: The main method declares it throws IOException, so when NIT.nit() throws the exception, it will propagate up and terminate the program.


6. What is the output of the following program
public class ExceptionHandling {
	static void nit(int a,int b) {
		   System.out.println(10/a); 
		   int[] arr={25,54,22,141,22,141,22,35};
		   System.out.println(arr[b]);
	}
	public static void main (String[] args) {
		try{
			nit(10, 0);
			nit(10, 15);
		    		    
    		}catch(ArithmeticException e){
    		   System.out.println("can't divide by zero");
    		}catch(ArrayIndexOutOfBoundsException e){
    		   System.out.println("Out of bounds!");
    		}
		}
   }
==>1
Out of bounds!